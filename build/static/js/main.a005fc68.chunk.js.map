{"version":3,"sources":["scripts/boardGenerator.js","styles.js","components/Board/BoardRow.js","components/Board/HorizontalNumbers.js","components/Board/VeritcalNumbers.js","scripts/boardSolver/glue.js","scripts/boardSolver/boardSolver.js","App.js","serviceWorker.js","index.js"],"names":["generateBoard","width","height","matrix","i","push","j","zeroOrOne","Math","floor","random","generateNumbers","arr","rowCounts","map","lst","currCount","lstNumbers","columnCounts","RowBox","styled","Box","_templateObject","_ref","flexdirection","_ref2","concat","borderLeft","BoardRow","react_default","a","createElement","dist","el","ind","key","HorizontalNumbers","topRowHeight","flexDirection","VerticalNumbers","id","glue","isRow","currentBoard","length","prevBorder","currHint","atCurrHint","reverseGlue","console","log","solveBoard","Object","slicedToArray","horizontalNumbers","verticalNumbers","completeRows","Array","fill","completeColumns","initialCheck","bound","reduce","acc","cur","buffer","arrSum","slice","fillX","b","board","k","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hints","state","document","getElementById","clientHeight","setState","topRow","topRowHeight2","_this$state","className","JSON","stringify","Board_HorizontalNumbers","VeritcalNumbers","row","Board_BoardRow","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a005fc68.chunk.js","sourcesContent":["export const generateBoard = (width, height) => {\n  let matrix = [];\n  for (let i = 0; i < height; i++) {\n    matrix.push([]);\n    for (let j = 0; j < width; j++) {\n      const zeroOrOne = Math.floor(Math.random() * 2);\n      matrix[i].push(zeroOrOne === 1);\n    }\n  }\n  //   console.log(matrix);\n  return generateNumbers(matrix, width, height);\n};\n\nexport const generateNumbers = (arr, width, height) => {\n  const rowCounts = arr.map(lst => {\n    let currCount = 0;\n    const lstNumbers = [];\n    for (let i = 0; i < width; i++) {\n      if (lst[i]) {\n        currCount++;\n      } else {\n        if (currCount) {\n          lstNumbers.push(currCount);\n          currCount = 0;\n        }\n      }\n    }\n    if (currCount) {\n      lstNumbers.push(currCount);\n    }\n    return lstNumbers;\n  });\n  const columnCounts = [];\n  for (let i = 0; i < width; i++) {\n    let currCount = 0;\n    const lstNumbers = [];\n    for (let j = 0; j < height; j++) {\n      if (arr[j][i]) {\n        currCount++;\n      } else {\n        if (currCount) {\n          lstNumbers.push(currCount);\n          currCount = 0;\n        }\n      }\n    }\n    if (currCount) {\n      lstNumbers.push(currCount);\n    }\n    columnCounts.push(lstNumbers);\n  }\n  return [rowCounts, columnCounts];\n};\n","import styled from \"styled-components\";\nimport { Box } from \"grid-styled\";\nimport { borderLeft } from \"styled-system\";\n\nexport const RowBox = styled(Box)`\n  display: flex;\n  flex-direction: ${({ flexdirection }) =>\n    flexdirection ? flexdirection : \"row\"};\n  align-items: center;\n\n  border: 1px solid black;\n  border-left: none;\n  min-height: ${({ height }) => (height ? `${height}px` : \"25px\")};\n  min-width: 25px;\n  padding: 0 3px;\n  ${borderLeft};\n`;\n","import React from \"react\";\nimport { Box, Flex } from \"grid-styled\";\nimport { RowBox } from \"../../styles\";\n\nconst BoardRow = ({ lst, width }) => (\n  <Flex>\n    {lst.map((el, ind) => {\n      return <RowBox key={ind}>{el}</RowBox>;\n    })}\n  </Flex>\n);\n\nexport default BoardRow;\n","import React from \"react\";\nimport { Box, Flex } from \"grid-styled\";\nimport { RowBox } from \"../../styles\";\n\nconst HorizontalNumbers = ({ lst, topRowHeight }) => {\n  return (\n    <Flex flexDirection=\"column\">\n      <RowBox borderLeft=\"1px solid black\" height={topRowHeight} />\n      {lst.map((arr, ind) => (\n        <RowBox borderLeft=\"1px solid black\" key={ind}>\n          {arr.map(el => `${el} `)}\n        </RowBox>\n      ))}\n    </Flex>\n  );\n};\n\nexport default HorizontalNumbers;\n","import React from \"react\";\nimport { Box, Flex } from \"grid-styled\";\nimport { RowBox } from \"../../styles\";\n\nconst VerticalNumbers = ({ lst }) => (\n  <Flex id=\"verticalRow\" flexdirection=\"row\">\n    {lst.map((arr, ind) => (\n      <RowBox key={ind} flexdirection=\"column\">\n        {arr.map((el, ind) => (\n          <Box key={ind}>{el}</Box>\n        ))}\n      </RowBox>\n    ))}\n  </Flex>\n);\n\nexport default VerticalNumbers;\n","export const glue = function(isRow, ind, currentBoard, lst, length) {\n  let prevBorder = 0;\n  let currHint = 0;\n  let atCurrHint = lst[currHint];\n  for (let i = 0; i < length; i++) {\n    if (prevBorder > atCurrHint) {\n      break;\n    }\n    if (isRow) {\n      if (currentBoard[ind][i] === \"O\") {\n        for (let j = 1; j < atCurrHint - prevBorder; j++) {\n          if (currentBoard[ind][i + j] === \"X\") {\n            return -1;\n          }\n          currentBoard[ind][i + j] = \"O\";\n        }\n        if (prevBorder === 0) {\n          if (currentBoard[ind][i + atCurrHint] === \"O\") {\n            return -1;\n          }\n          currentBoard[ind][i + atCurrHint] = \"X\";\n          i += atCurrHint;\n          prevBorder = -1;\n          currHint++;\n          if (currHint < lst.length) {\n            atCurrHint = lst[currHint];\n          }\n        } else {\n          break;\n        }\n      } else if (currentBoard[ind][i] === \"X\") {\n        prevBorder--;\n      }\n    } else {\n      if (currentBoard[i][ind] === \"O\") {\n        for (let j = 1; j < atCurrHint - prevBorder; j++) {\n          if (currentBoard[i + j][ind] === \"X\") {\n            return -1;\n          }\n          currentBoard[i + j][ind] = \"O\";\n        }\n        if (prevBorder === 0) {\n          if (currentBoard[i + atCurrHint][ind] === \"O\") {\n            return -1;\n          }\n          currentBoard[i + atCurrHint][ind] = \"X\";\n          i += atCurrHint;\n          prevBorder = -1;\n          currHint++;\n          if (currHint < lst.length) {\n            atCurrHint = lst[currHint];\n          }\n        } else {\n          break;\n        }\n      } else if (currentBoard[i][ind] === \"X\") {\n        prevBorder--;\n      }\n    }\n    prevBorder++;\n  }\n};\n\nexport const reverseGlue = function(isRow, ind, currentBoard, lst, length) {\n  let prevBorder = 0;\n  let currHint = lst.length - 1;\n  let atCurrHint = lst[currHint];\n  for (let i = length - 1; i > 0; i--) {\n    if (prevBorder > atCurrHint) {\n      break;\n    }\n    if (isRow) {\n      if (currentBoard[ind][i] === \"O\") {\n        for (let j = 1; j < atCurrHint - prevBorder; j++) {\n          if (currentBoard[ind][i - j] === \"X\") {\n            return -1;\n          }\n          currentBoard[ind][i - j] = \"O\";\n        }\n        if (prevBorder === 0) {\n          if (currentBoard[ind][i - atCurrHint] === \"O\") {\n            return -1;\n          }\n          currentBoard[ind][i - atCurrHint] = \"X\";\n          i -= atCurrHint;\n          prevBorder = -1;\n          if (currHint > 0) {\n            currHint--;\n          }\n          atCurrHint = lst[currHint];\n        } else {\n          break;\n        }\n      } else if (currentBoard[ind][i] === \"X\") {\n        prevBorder--;\n      }\n    } else {\n      if (currentBoard[i][ind] === \"O\") {\n        for (let j = 1; j < atCurrHint - prevBorder; j++) {\n          console.log(i, j);\n          if (currentBoard[i - j][ind] === \"X\") {\n            return -1;\n          }\n          currentBoard[i - j][ind] = \"O\";\n        }\n        if (prevBorder === 0) {\n          console.log(i, currHint);\n          if (currentBoard[i - atCurrHint][ind] === \"O\") {\n            return -1;\n          }\n          currentBoard[i - atCurrHint][ind] = \"X\";\n          i -= atCurrHint;\n          prevBorder = -1;\n          currHint--;\n          if (currHint > 0) {\n            atCurrHint = lst[currHint];\n          }\n        } else {\n          break;\n        }\n      } else if (currentBoard[i][ind] === \"X\") {\n        prevBorder--;\n      }\n    }\n    prevBorder++;\n  }\n};\n","import { glue, reverseGlue } from \"./glue\";\n\nexport const solveBoard = (\n  width,\n  height,\n  [horizontalNumbers, verticalNumbers]\n) => {\n  const completeRows = Array(height).fill(false);\n  const completeColumns = Array(width).fill(false);\n\n  //Fills empty spaces with X's, to be used when completing a row or column\n  let fillX = function(currentBoard, isRow, ind) {\n    const length = isRow ? width : height;\n    for (let i = 0; i < length; i++) {\n      if (isRow) {\n        if (currentBoard[ind][i] === \"\") {\n          currentBoard[ind][i] = \"X\";\n        }\n      } else {\n        if (currentBoard[i][ind] === \"\") {\n          currentBoard[i][ind] = \"X\";\n        }\n      }\n    }\n  };\n\n  //Initializes a row/column using the mathematical approach (see https://en.wikipedia.org/wiki/Nonogram)\n  let initialCheck = function(currentBoard, isRow, ind, lst) {\n    const length = isRow ? width : height;\n    const bound = length - lst.reduce((acc, cur) => acc + cur + 1, -1);\n    for (let i = 0; i < length; i++) {\n      if (lst[i] > bound) {\n        const buffer = arrSum(lst.slice(0, i)) + bound + i;\n        for (let j = 0; j < lst[i] - bound; j++) {\n          if (isRow) {\n            currentBoard[ind][buffer + j] = \"O\";\n          } else {\n            currentBoard[buffer + j][ind] = \"O\";\n          }\n        }\n      }\n    }\n    if (bound === 0) {\n      fillX(currentBoard, isRow, ind);\n      if (isRow) {\n        completeRows[ind] = true;\n      } else {\n        completeColumns[ind] = true;\n      }\n    }\n  };\n  const arrSum = arr => arr.reduce((a, b) => a + b, 0);\n  const board = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill(\"\"));\n  }\n\n  for (let i = 0; i < height; i++) {\n    initialCheck(board, true, i, horizontalNumbers[i]);\n  }\n  for (let i = 0; i < width; i++) {\n    initialCheck(board, false, i, verticalNumbers[i]);\n  }\n\n  // console.log(board);\n\n  // ASSORTED TECHNIQUES FOR SOLVING\n  // WE WILL ALSO KEEP TRACK OF IF A BOARD IS IMPOSSIBLE FOR RECURSION PURPOSES\n\n  for (let k = 0; k < 5; k++) {\n    for (let i = 0; i < 1; i++) {\n      if (!completeRows[i]) {\n        glue(true, i, board, horizontalNumbers[i], width);\n        reverseGlue(true, i, board, horizontalNumbers[i], width);\n      }\n    }\n    for (let i = 0; i < width; i++) {\n      if (!completeColumns[i]) {\n        glue(false, i, board, verticalNumbers[i], height);\n        reverseGlue(false, i, board, verticalNumbers[i], height);\n      }\n    }\n  }\n\n  return board;\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Box, Flex } from \"grid-styled\";\nimport { generateBoard } from \"./scripts/boardGenerator\";\nimport BoardRow from \"./components/Board/BoardRow\";\nimport HorizontalNumbers from \"./components/Board/HorizontalNumbers\";\nimport VerticalNumbers from \"./components/Board/VeritcalNumbers\";\nimport { solveBoard } from \"./scripts/boardSolver/boardSolver\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const hints = generateBoard(10, 10);\n    const board = solveBoard(10, 10, hints);\n    this.state = { topRowHeight: 0, hints, board };\n  }\n\n  componentDidMount() {\n    const topRow = document.getElementById(\"verticalRow\");\n    const topRowHeight = topRow.clientHeight;\n    this.setState({\n      topRowHeight\n    });\n  }\n\n  componentDidUpdate() {\n    const topRow = document.getElementById(\"verticalRow\");\n    const topRowHeight2 = topRow ? topRow.clientHeight : 0;\n    if (this.state.topRowHeight !== topRowHeight2) {\n      this.setState({ topRowHeight2: topRowHeight2 });\n    }\n  }\n\n  render() {\n    const { hints, board } = this.state;\n    return (\n      <div className=\"App\">\n        <Box>{JSON.stringify(hints[0])}</Box>\n        <Box>{JSON.stringify(hints[1])}</Box>\n        <Flex flexDirection=\"row\">\n          <HorizontalNumbers\n            topRowHeight={this.state ? this.state.topRowHeight : 0}\n            lst={hints[0]}\n          />\n          <Flex flexDirection=\"column\">\n            <VerticalNumbers lst={hints[1]} />\n            <Flex flexDirection=\"column\">\n              {board.map((row, ind) => (\n                <BoardRow key={ind} width={10} lst={row} />\n              ))}\n            </Flex>\n          </Flex>\n        </Flex>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}